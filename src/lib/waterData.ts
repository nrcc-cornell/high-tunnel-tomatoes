async function fetchObsPrecip(lat, lon, eDate) {
  const response = await fetch('https://grid2.rcc-acis.org/GridData', {
    method: 'POST',
    body: JSON.stringify({
      loc: `${lon},${lat}`,
      grid: 'nrcc-model',
      sDate: `${eDate.slice(0,4)}-03-01`,
      eDate,
      elems: [{ name: 'pcpn' }]
    }),
  });

  if (!response.ok) {
    throw new Error(response.statusText);
  }

  const results = (await response.json()).data;
  while (results[results.length - 1].includes(-999)) {
    results.pop();
  }
  return results;
};

function calcDailyPrecipFromHrly(valuesArr, precipIdx, initSum=0) {
  // Loop hourly data summing precip at given index through 7:00am
  // then start a new daily sum by storing the current total and resetting to 0
  const returnArr = [];
  let sum = initSum;
  valuesArr.forEach(arr => {
    let precip = arr[precipIdx];
    if (precip === 'M') {
      precip = 0;
    } else {
      precip = parseFloat(precip);
    }
    sum += precip;

    if (arr[0].slice(11,13) === '07') {
      returnArr.push([arr[0].slice(0,10), sum]);
      sum = 0;
    }
  });
  return {returnArr, remainingSum: sum};
}

async function fetchForePrecip(lat, lon, sDate) {
  // If we are past the end of the season we do not need to get the forecast
  if (sDate.slice(5) === '10-31' && new Date().toISOString().slice(5,10) !== '10-31') {
    return [];
  }
  
  // Make start date one day earlier to ensure full coverage
  let date = new Date(sDate + 'T00:00');
  date.setDate((date.getDate() - 1));
  const strDate = date.toISOString().slice(0,10).replace('-','').replace('-','') + '08';
  
  const response = await fetch('https://hrly.nrcc.cornell.edu/locHrly', {
    method: 'POST',
    body: JSON.stringify({
      lon: lon,
      lat: lat,
      tzo: -5,
      sdate:  strDate,
      edate: "now"
    }),
  });

  if (!response.ok) {
    throw new Error(response.statusText);
  }

  const results = await response.json();

  // Sum observed hourly in daily and get the remaining sum to intialize forecast hourly with
  const {returnArr: obsArr, remainingSum} = calcDailyPrecipFromHrly(results.hrlyData, 2);
  
  // Cap forecast hourly at 72hrs and calculate the rest of the forecast from it
  const endIdx = Math.min(72, results.fcstData.findIndex(arr => arr[11] === 'M'));
  const { returnArr: foreArr } = calcDailyPrecipFromHrly(results.fcstData.slice(0, endIdx), 11, remainingSum);
  
  return obsArr.concat(foreArr);
}

async function fetchPrecip(lat, lon, eDate) {
  const [obsPrecip, forePrecip] = await Promise.all([
    fetchObsPrecip(lat, lon, eDate),
    fetchForePrecip(lat, lon, eDate)
  ])


  while (forePrecip.length && obsPrecip[obsPrecip.length - 1][0] === forePrecip[0][0]) {
    forePrecip.shift();
  }

  return {
    precip: obsPrecip.concat(forePrecip),
    precipFcstLength: forePrecip.length
  };
}

async function fetchPETData(lat, lon, year) {
  const response = await fetch(`https://x6xfv2cdrl.execute-api.us-east-1.amazonaws.com/production/irrigation?lat=${lat}&lon=${lon}&year=${year}`);

  if (!response.ok) {
    throw new Error(response.statusText);
  }

  const results = await response.json();
  const obsPET = results.pet.map((pet,i) => ([year + '-' + results.dates_pet[i].split('/').join('-'), pet]));
  const forePET = results.pet_fcst.map((pet,i) => ([year + '-' + results.dates_pet_fcst[i].split('/').join('-'), pet]));
  
  return {
    pet: obsPET.concat(forePET),
    petFcstLength: forePET.length
  };
};

export async function getWaterData({ lat, lon }, date) {
  try {
    // fetch PET and precip
    let [
      { precip, precipFcstLength },
      { pet, petFcstLength}
    ] = await Promise.all([
      fetchPrecip(lat, lon, date),
      fetchPETData(lat, lon, date.slice(0,4))
    ]);

    // adjust pet and precip to have matching lengths
    const lengthDiff = precip.length - pet.length;
    if (lengthDiff > 0) {
      precipFcstLength = Math.max(precipFcstLength - lengthDiff, 0);
      precip = precip.slice(0, precip.length - lengthDiff)
    } else if (lengthDiff < 0) {
      petFcstLength = Math.max(petFcstLength - lengthDiff, 0);
      pet = pet.slice(0, pet.length - lengthDiff)
    }

    // instantiate results obj and determine the number of forecast days that will be in results
    const results = {
      dates: [],
      pet: [],
      precip: [],
      fcstLength: Math.max(precipFcstLength, petFcstLength)
    };

    console.log(precip);
    // loop through data pushing to results obj and ensuring that the dates match
    for (let i = 0; i < Math.min(pet.length, precip.length); i++) {
      const [petDate, petValue] = pet[i];
      const [precipDate, precipValue] = precip[i];
      
      if (petDate === precipDate) {
        results.dates.push(petDate);
        results.pet.push(petValue);
        results.precip.push(precipValue);
      } else {
        throw 'PET and precip dates do not match';
      }
    }
    console.log(results);
    return results;
  } catch (e) {
    console.error(e);
    return null;
  }
  // return {
  //   "dates": [
  //     "2023-03-01",
  //     "2023-03-02",
  //     "2023-03-03",
  //     "2023-03-04",
  //     "2023-03-05",
  //     "2023-03-06",
  //     "2023-03-07",
  //     "2023-03-08",
  //     "2023-03-09",
  //     "2023-03-10",
  //     "2023-03-11",
  //     "2023-03-12",
  //     "2023-03-13",
  //     "2023-03-14",
  //     "2023-03-15",
  //     "2023-03-16",
  //     "2023-03-17",
  //     "2023-03-18",
  //     "2023-03-19",
  //     "2023-03-20",
  //     "2023-03-21",
  //     "2023-03-22",
  //     "2023-03-23",
  //     "2023-03-24",
  //     "2023-03-25",
  //     "2023-03-26",
  //     "2023-03-27",
  //     "2023-03-28",
  //     "2023-03-29",
  //     "2023-03-30",
  //     "2023-03-31",
  //     "2023-04-01",
  //     "2023-04-02",
  //     "2023-04-03",
  //     "2023-04-04",
  //     "2023-04-05",
  //     "2023-04-06",
  //     "2023-04-07",
  //     "2023-04-08",
  //     "2023-04-09",
  //     "2023-04-10",
  //     "2023-04-11",
  //     "2023-04-12",
  //     "2023-04-13",
  //     "2023-04-14",
  //     "2023-04-15",
  //     "2023-04-16",
  //     "2023-04-17",
  //     "2023-04-18",
  //     "2023-04-19",
  //     "2023-04-20",
  //     "2023-04-21",
  //     "2023-04-22",
  //     "2023-04-23",
  //     "2023-04-24",
  //     "2023-04-25",
  //     "2023-04-26",
  //     "2023-04-27",
  //     "2023-04-28",
  //     "2023-04-29",
  //     "2023-04-30",
  //     "2023-05-01",
  //     "2023-05-02",
  //     "2023-05-03",
  //     "2023-05-04",
  //     "2023-05-05",
  //     "2023-05-06",
  //     "2023-05-07",
  //     "2023-05-08",
  //     "2023-05-09",
  //     "2023-05-10",
  //     "2023-05-11",
  //     "2023-05-12",
  //     "2023-05-13",
  //     "2023-05-14",
  //     "2023-05-15",
  //     "2023-05-16",
  //     "2023-05-17",
  //     "2023-05-18",
  //     "2023-05-19",
  //     "2023-05-20",
  //     "2023-05-21",
  //     "2023-05-22",
  //     "2023-05-23",
  //     "2023-05-24",
  //     "2023-05-25",
  //     "2023-05-26",
  //     "2023-05-27",
  //     "2023-05-28",
  //     "2023-05-29",
  //     "2023-05-30",
  //     "2023-05-31",
  //     "2023-06-01",
  //     "2023-06-02",
  //     "2023-06-03",
  //     "2023-06-04",
  //     "2023-06-05",
  //     "2023-06-06",
  //     "2023-06-07",
  //     "2023-06-08",
  //     "2023-06-09",
  //     "2023-06-10",
  //     "2023-06-11",
  //     "2023-06-12",
  //     "2023-06-13",
  //     "2023-06-14",
  //     "2023-06-15",
  //     "2023-06-16",
  //     "2023-06-17",
  //     "2023-06-18",
  //     "2023-06-19",
  //     "2023-06-20",
  //     "2023-06-21",
  //     "2023-06-22",
  //     "2023-06-23",
  //     "2023-06-24",
  //     "2023-06-25",
  //     "2023-06-26",
  //     "2023-06-27",
  //     "2023-06-28",
  //     "2023-06-29",
  //     "2023-06-30",
  //     "2023-07-01",
  //     "2023-07-02",
  //     "2023-07-03",
  //     "2023-07-04",
  //     "2023-07-05",
  //     "2023-07-06",
  //     "2023-07-07",
  //     "2023-07-08",
  //     "2023-07-09",
  //     "2023-07-10",
  //     "2023-07-11",
  //     "2023-07-12",
  //     "2023-07-13",
  //     "2023-07-14",
  //     "2023-07-15",
  //     "2023-07-16",
  //     "2023-07-17",
  //     "2023-07-18",
  //     "2023-07-19",
  //     "2023-07-20",
  //     "2023-07-21",
  //     "2023-07-22",
  //     "2023-07-23",
  //     "2023-07-24",
  //     "2023-07-25",
  //     "2023-07-26",
  //     "2023-07-27",
  //     "2023-07-28",
  //     "2023-07-29",
  //     "2023-07-30",
  //     "2023-07-31",
  //     "2023-08-01",
  //     "2023-08-02",
  //     "2023-08-03",
  //     "2023-08-04",
  //     "2023-08-05",
  //     "2023-08-06",
  //     "2023-08-07",
  //     "2023-08-08",
  //     "2023-08-09",
  //     "2023-08-10",
  //     "2023-08-11",
  //     "2023-08-12",
  //     "2023-08-13",
  //     "2023-08-14",
  //     "2023-08-15",
  //     "2023-08-16",
  //     "2023-08-17",
  //     "2023-08-18",
  //     "2023-08-19",
  //     "2023-08-20",
  //     "2023-08-21",
  //     "2023-08-22",
  //     "2023-08-23",
  //     "2023-08-24",
  //     "2023-08-25",
  //     "2023-08-26",
  //     "2023-08-27",
  //     "2023-08-28",
  //     "2023-08-29",
  //     "2023-08-30",
  //     "2023-08-31",
  //     "2023-09-01",
  //     "2023-09-02",
  //     "2023-09-03",
  //     "2023-09-04",
  //     "2023-09-05",
  //     "2023-09-06",
  //     "2023-09-07",
  //     "2023-09-08",
  //     "2023-09-09",
  //     "2023-09-10",
  //     "2023-09-11",
  //     "2023-09-12",
  //     "2023-09-13",
  //     "2023-09-14",
  //     "2023-09-15",
  //     "2023-09-16",
  //     "2023-09-17",
  //     "2023-09-18",
  //     "2023-09-19",
  //     "2023-09-20",
  //     "2023-09-21",
  //     "2023-09-22",
  //     "2023-09-23",
  //     "2023-09-24",
  //     "2023-09-25",
  //     "2023-09-26",
  //     "2023-09-27",
  //     "2023-09-28",
  //     "2023-09-29",
  //     "2023-09-30",
  //     "2023-10-01",
  //     "2023-10-02",
  //     "2023-10-03",
  //     "2023-10-04",
  //     "2023-10-05",
  //     "2023-10-06",
  //     "2023-10-07",
  //     "2023-10-08",
  //     "2023-10-09",
  //     "2023-10-10",
  //     "2023-10-11"
  //   ],
  //   "pet": [
  //     0.009999999776482582,
  //     0.030792957171797752,
  //     0.018182311207056046,
  //     0.02948763407766819,
  //     0.011305322870612144,
  //     0.009999999776482582,
  //     0.03818231076002121,
  //     0.018182311207056046,
  //     0.018182311207056046,
  //     0.018182311207056046,
  //     0.03261064738035202,
  //     0.023123012855648994,
  //     0.0420982800424099,
  //     0.024312429130077362,
  //     0.008182311430573463,
  //     0.02766994573175907,
  //     0.03454693406820297,
  //     0.018182311207056046,
  //     0.02766994573175907,
  //     0.011305322870612144,
  //     0.03636462241411209,
  //     0.047669943422079086,
  //     0.04818231239914894,
  //     0.03454693406820297,
  //     0.047669943422079086,
  //     0.019999999552965164,
  //     0.035852257162332535,
  //     0.052610646933317184,
  //     0.039793841540813446,
  //     0.05740559101104736,
  //     0.0382501520216465,
  //     0.02914126217365265,
  //     0.06750795245170593,
  //     0.053241610527038574,
  //     0.07142391800880432,
  //     0.05181768909096718,
  //     0.047389354556798935,
  //     0.04181768745183945,
  //     0.05215621367096901,
  //     0.08648321777582169,
  //     0.10466553270816803,
  //     0.1133602112531662,
  //     0.10830090939998627,
  //     0.12454693019390106,
  //     0.1532416045665741,
  //     0.16928061842918396,
  //     0.16932563483715057,
  //     0.1475079506635666,
  //     0.033753976225852966,
  //     0.02261064574122429,
  //     0.02261064574122429,
  //     0.11142392456531525,
  //     0.14375397562980652,
  //     0.11505930125713348,
  //     0.042576517909765244,
  //     0.04324160888791084,
  //     0.053241610527038574,
  //     0.05209828168153763,
  //     0.12387257069349289,
  //     0.1281823068857193,
  //     0.03885667026042938,
  //     0.039881400763988495,
  //     0.051423922181129456,
  //     0.0494876354932785,
  //     0.02948763407766819,
  //     0.051423922181129456,
  //     0.05522118881344795,
  //     0.1126105934381485,
  //     0.13818225264549255,
  //     0.1275513917207718,
  //     0.129487544298172,
  //     0.1426105946302414,
  //     0.15818224847316742,
  //     0.1599999964237213,
  //     0.15818224847316742,
  //     0.12818224728107452,
  //     0.13636448979377747,
  //     0.12142369151115417,
  //     0.09142369031906128,
  //     0.14324145019054413,
  //     0.13636448979377747,
  //     0.09687694907188416,
  //     0.10442834347486496,
  //     0.15687695145606995,
  //     0.16687695682048798,
  //     0.05948754400014877,
  //     0.12818224728107452,
  //     0.1613052934408188,
  //     0.18130530416965485,
  //     0.18312305212020874,
  //     0.1932414472103119,
  //     0.1937538981437683,
  //     0.19687694311141968,
  //     0.2013052999973297,
  //     0.1786947101354599,
  //     0.1299564093351364,
  //     0.12319785356521606,
  //     0.11936914920806885,
  //     0.0919797420501709,
  //     0.0581822469830513,
  //     0.05130529776215553,
  //     0.0694875419139862,
  //     0.11687695235013962,
  //     0.13648289442062378,
  //     0.08197974413633347,
  //     0.08830064535140991,
  //     0.06494080275297165,
  //     0.11067444831132889,
  //     0.08494079858064651,
  //     0.0581822469830513,
  //     0.0788130983710289,
  //     0.15960593521595,
  //     0.1726105958223343,
  //     0.1731230467557907,
  //     0.17755140364170074,
  //     0.10822584480047226,
  //     0.06687694787979126,
  //     0.15505920350551605,
  //     0.08988160640001297,
  //     0.09181775152683258,
  //     0.05936914682388306,
  //     0.08830064535140991,
  //     0.16375389695167542,
  //     0.13766978681087494,
  //     0.07999999821186066,
  //     0.08130529522895813,
  //     0.15738940238952637,
  //     0.18738940358161926,
  //     0.19312304258346558,
  //     0.12703894078731537,
  //     0.1594875454902649,
  //     0.09051245450973511,
  //     0.05687694996595383,
  //     0.15818224847316742,
  //     0.13442835211753845,
  //     0.1070389375090599,
  //     0.1459704339504242,
  //     0.1594875454902649,
  //     0.10687694698572159,
  //     0.1650591939687729,
  //     0.12209814041852951,
  //     0.1599999964237213,
  //     0.17766979336738586,
  //     0.10585203766822815,
  //     0.14324145019054413,
  //     0.1768769472837448,
  //     0.11442834883928299,
  //     0.12999999523162842,
  //     0.16750779747962952,
  //     0.08454674482345581,
  //     0.1558520346879959,
  //     0.0713052973151207,
  //     0.14000000059604645,
  //     0.13375389575958252,
  //     0.11818224936723709,
  //     0.15687695145606995,
  //     0.10557164996862411,
  //     0.10932555794715881,
  //     0.1481822431087494,
  //     0.16636449098587036,
  //     0.08557165414094925,
  //     0.05391589179635048,
  //     0.13261058926582336,
  //     0.0844283476471901,
  //     0.11209814250469208,
  //     0.10636449605226517,
  //     0.11324144899845123,
  //     0.12636449933052063,
  //     0.07414796203374863,
  //     0.12557165324687958,
  //     0.07624609768390656,
  //     0.07715733349323273,
  //     0.07569004595279694,
  //     0.12324144691228867,
  //     0.10130529850721359,
  //     0.1313052922487259,
  //     0.15000000596046448,
  //     0.061817754060029984,
  //     0.04442834481596947,
  //     0.10193614661693573,
  //     0.10557164996862411,
  //     0.07533486187458038,
  //     0.05834423750638962,
  //     0.04964953660964966,
  //     0.10312304645776749,
  //     0.13505919277668,
  //     0.11142369359731674,
  //     0.1276697963476181,
  //     0.1257336437702179,
  //     0.13079284131526947,
  //     0.13948754966259003,
  //     0.12272898852825165,
  //     0.09142369031906128,
  //     0.07857630401849747,
  //     0.052610594779253006,
  //     0.0623302087187767,
  //     0.11244860291481018,
  //     0.0750591978430748,
  //     0.06403429061174393,
  //     0.09557165205478668,
  //     0.08869470655918121,
  //     0.07494080066680908,
  //     0.0660841092467308,
  //     0.03573364391922951,
  //     0.08079284429550171,
  //     0.10818224400281906,
  //     0.09442834556102753,
  //     0.0623302087187767,
  //     0.05233020707964897,
  //     0.07296106219291687,
  //     0.07999999821186066,
  //     0.0881822481751442,
  //     0.07755139470100403,
  //     0.04869470372796059,
  //     0.08687695115804672,
  //     0.0844283476471901,
  //     0.07624609768390656,
  //     0.09000000357627869,
  //     0.10000000149011612,
  //     0.07999999821186066,
  //     0.04818224906921387,
  //     0.028182247653603554,
  //     0.027551395818591118,
  //     0.03130529820919037,
  //     0.03130529820919037
  //   ],
  //   "precip": [
  //     0.18005371,
  //     0.11999512,
  //     0,
  //     0.6899414,
  //     0.14001465,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0.17004395,
  //     0.02999878,
  //     0.010002136,
  //     0.77001953,
  //     0.5097656,
  //     0,
  //     0,
  //     0.5498047,
  //     0.11999512,
  //     0.08001709,
  //     0,
  //     0,
  //     0,
  //     0.29003906,
  //     0,
  //     0.3701172,
  //     0,
  //     0.19995117,
  //     0,
  //     0.11999512,
  //     0,
  //     0.6699219,
  //     0.17004395,
  //     0,
  //     0.099975586,
  //     0.05999756,
  //     0.95996094,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0.010002136,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0.16003418,
  //     0.15002441,
  //     0.11999512,
  //     0.040008545,
  //     0,
  //     0,
  //     1.3603516,
  //     0.5498047,
  //     0.08001709,
  //     0.020004272,
  //     0.16003418,
  //     0,
  //     0.11999512,
  //     0.19995117,
  //     1.6396484,
  //     0.47998047,
  //     0.11999512,
  //     0.25,
  //     0.20996094,
  //     0.18005371,
  //     0,
  //     0.049987793,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0.020004272,
  //     0,
  //     0,
  //     0,
  //     0.27001953,
  //     0.040008545,
  //     0,
  //     0,
  //     0.090026855,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0.049987793,
  //     0,
  //     0,
  //     0.040008545,
  //     0.14001465,
  //     0.099975586,
  //     0.10998535,
  //     0.10998535,
  //     0,
  //     0.05999756,
  //     0.91015625,
  //     0,
  //     0.6899414,
  //     0,
  //     0.42993164,
  //     0.02999878,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     1.0703125,
  //     0.32006836,
  //     0.45996094,
  //     0.049987793,
  //     1.3798828,
  //     0,
  //     0,
  //     0,
  //     1.0302734,
  //     0.32006836,
  //     0.08001709,
  //     0,
  //     0,
  //     0,
  //     0.75,
  //     0,
  //     0.10998535,
  //     1.7099609,
  //     0.11999512,
  //     0.040008545,
  //     0.7402344,
  //     0.05999756,
  //     0.05999756,
  //     0.08001709,
  //     0.14001465,
  //     0,
  //     0,
  //     0.32006836,
  //     0.010002136,
  //     0,
  //     0.020004272,
  //     0.23999023,
  //     0.070007324,
  //     0.010002136,
  //     0.3100586,
  //     0,
  //     0.8198242,
  //     0,
  //     0,
  //     0,
  //     0,
  //     1.5302734,
  //     1.6796875,
  //     0,
  //     0.48999023,
  //     0.75,
  //     0.3100586,
  //     0,
  //     0.4699707,
  //     0,
  //     0.95996094,
  //     0.099975586,
  //     0.090026855,
  //     0.5698242,
  //     0,
  //     1.3496094,
  //     0.9301758,
  //     0.020004272,
  //     0.099975586,
  //     0,
  //     0,
  //     0,
  //     0.36010742,
  //     0.090026855,
  //     0.13000488,
  //     0,
  //     0.23999023,
  //     0.4099121,
  //     0.10998535,
  //     0,
  //     0,
  //     0.02999878,
  //     0.020004272,
  //     0,
  //     0,
  //     0,
  //     0.5698242,
  //     0,
  //     0.23999023,
  //     0.099975586,
  //     0,
  //     0.17004395,
  //     0.099975586,
  //     0,
  //     0,
  //     0,
  //     0.35009766,
  //     0,
  //     0.02999878,
  //     0,
  //     0,
  //     0,
  //     0.02999878,
  //     0.049987793,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0,
  //     0.020004272,
  //     1.3496094,
  //     0.6298828,
  //     0.3400000000000001,
  //     0,
  //     0
  //   ],
  //   "fcstLength": 3
  // };
}